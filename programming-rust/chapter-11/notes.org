* Chapter 11 - Traits and Generics
- /Polymorphism/ is the ability of code operating on values of many different types.
  - Rust supports polymorphism with traits and generics.
    - /Traits/ are Rust's take on interfaces or abstract base classes.
      - An Example using the ~std::io::Write~ trait:
        #+begin_src rust
          trait Write {
              fn write(&mut self, buf: &[u8]) -> Result<usize>;
              fn flush(&mut self) -> Result<()>;
              fn write_all(&mut self, buf: &[u8]) -> Result<()> {...}
              ...
          }

          fn say_hello(out: &mut dyn Write) -> std::io::Result<()> {
            out.write_all(b"hello world\n")?;
            out.flush()
          }
        #+end_src
        - The type ~&mut dyn Write~ means "a mutable reference to any value that implements the Write trait"
        - **Note** ~dyn~ is used to highlight that calls to methods on the associated Trait are dynamically dispatched
      - Generic functions use traits in bounds to spell out what types of arguments they can be applied to.
** Using Traits
- When using a trait, the trait itself must be in scope otherwise all its methods are hidden
*** Trait Objects
- In Rust, a variable's size has to be known at compile time. Thus you must assign a trait object variable to a reference:
  #+begin_src rust
    let mut buf: Vec<u8> = vec![];
    let writer: &mut dyn Write = buf; // error, does not have constant size
    let writer: &mut dyn Write = &mut buf; // ok
  #+end_src
- A reference to a trait type is called a trait object.
  - In memory a trait object is a fat pointer consisting of a pointer to the value plus a pointer to a table representing that value's type (a /vtable/ or /virtual table/).
- Using trait objects can reduce the total size of compiled code compared to using genereics.
- Generics have three important advantages over trait objects (making them the more common choice):
  1. Speed, the absence of the ~dyn~ keyword allows the compiler to determine the exact method to call rather than having to dispatch to a vtable.
  2. Not every trait can support trait objects
  3. It is easy to bound a generic type parameter with several traits at once.
** Defining and Implementing Traits
- To define a trait, give it a name and list the type signatures of the methods
- To implement a trait use the ~impl TraitName for Type~ syntax
  - Everything defined in a trait impl must actually be a feature of the trait
- Rust traits can have methods with default implementations
- /Extension traits/ are traits that are used to add a method to an existing type.
- You can add an extension trait to a whole family of types at once using a generic impl block
#+begin rust
impl <W: Write> WriteHtml for W {
  fn write_html(&mut self, html: &HtmlDocument) -> io::Result<()> {}
}
#+end
- A trait can use the ~Self~ keyword as a type to indicate the value is the same as the implementing type.
  - A trait that uses the ~Self~ type is incompatible with trait objects
  - Trait objects are really intended for the simplest kinds of traits (like types that could be implemented as interfaces in Java)
*** Subtraits
- Can declare a trait as an extension of another trail
#+begin rust
trait Creature: Visible {
...
}
#+end
  - The above trait declaration indicates that all ~Creatures~ are ~Visible~
    - It's an error to implement ~Creature~ for a type without implementing ~Visible~. ~Creature~ is a /subtrait/, ~Visible~ a /supertrait/
      - Subtraits do not inherit associated items of their supertraits, each needs to be in scope in order to use it
- Traits can include type-associated functions (Rust's analog to static methods).
** Traits that define relationships between types
- An /associated type/ is a type that each implementor fo a trait must specify. (The example of ~type Item;~ for an ~Iterator~ trait)
  - Associated types are perfect for cases where each implementation has /one/ specific related type.
